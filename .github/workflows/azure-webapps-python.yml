# This workflow will build and push a Python application to an Azure Web App when a commit is pushed to your default branch.
#
# Pre-requisites:
# 1. Create your Azure Web App (Flask/Django supported).
# 2. Download the Publish Profile from the Azure Portal (Web App â†’ Overview â†’ Get publish profile).
# 3. Add the secret in GitHub: Settings â†’ Secrets â†’ Actions â†’ New Repository Secret â†’ name it AZURE_WEBAPP_PUBLISH_PROFILE.
# 4. Ensure requirements.txt contains Flask and gunicorn.

name: Build and deploy Python app to Azure Web App

env:
  AZURE_WEBAPP_NAME: legalAI-App   # App Service name
  PYTHON_VERSION: '3.11'
  AZURE_RESOURCE_GROUP: Legal_Assistant   # <-- update with your actual group

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Force ZipDeploy
        run: echo "SCM_DO_BUILD_DURING_DEPLOYMENT=true" >> $GITHUB_ENV

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v3
        with:
          app-name: ${{ env.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .
          clean: true

      # ðŸ”¹ Authenticate with Azure before setting startup command
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Set startup command
        run: |
          az webapp config set \
            --name ${{ env.AZURE_WEBAPP_NAME }} \
            --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
            --startup-file "gunicorn --bind=0.0.0.0 --timeout 600 app:app"



